{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getSlideHeight, getAlignmentOffset } from '../utilities/style-utilities';\nimport { getSlideDirection, handleSelfFocus, isFullyVisible } from '../utilities/utilities';\nvar MIN_ZOOM_SCALE = 0;\nvar MAX_ZOOM_SCALE = 1;\n\nvar ScrollTransition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ScrollTransition, _React$Component);\n\n  function ScrollTransition(props) {\n    var _this;\n\n    _classCallCheck(this, ScrollTransition);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollTransition).call(this, props));\n    _this.getListStyles = _this.getListStyles.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /* eslint-disable complexity */\n\n\n  _createClass(ScrollTransition, [{\n    key: \"getSlideTargetPosition\",\n    value: function getSlideTargetPosition(currentSlideIndex, positionValue) {\n      var offset = 0;\n\n      if (this.props.animation === 'zoom' && (this.props.currentSlide === currentSlideIndex + 1 || this.props.currentSlide === 0 && currentSlideIndex === this.props.children.length - 1)) {\n        offset = this.props.slideOffset;\n      } else if (this.props.animation === 'zoom' && (this.props.currentSlide === currentSlideIndex - 1 || this.props.currentSlide === this.props.children.length - 1 && currentSlideIndex === 0)) {\n        offset = -this.props.slideOffset;\n      }\n\n      var targetPosition = (this.props.slideWidth + this.props.cellSpacing) * currentSlideIndex;\n      var alignmentOffset = getAlignmentOffset(currentSlideIndex, this.props);\n      var relativePosition = positionValue - alignmentOffset;\n      var startSlideIndex = Math.min(Math.abs(Math.floor(relativePosition / this.props.slideWidth)), this.props.slideCount - 1);\n\n      if (this.props.wrapAround && currentSlideIndex !== startSlideIndex) {\n        var slidesOutOfView = Math.max(this.props.slideCount - Math.ceil(this.props.frameWidth / this.props.slideWidth), // Total slides in view\n        0);\n        var slidesOutOfViewBefore = Math.floor(slidesOutOfView / 2);\n        var slidesOutOfViewAfter = slidesOutOfView - slidesOutOfViewBefore;\n        var direction = getSlideDirection(startSlideIndex, this.props.currentSlide, this.props.isWrappingAround);\n\n        if (direction < 0) {\n          var temp = slidesOutOfViewBefore;\n          slidesOutOfViewBefore = slidesOutOfViewAfter;\n          slidesOutOfViewAfter = temp;\n        }\n\n        var slidesInViewBefore = Math.ceil(alignmentOffset / this.props.slideWidth);\n        var slidesBefore = slidesInViewBefore + slidesOutOfViewBefore;\n        var slidesInViewAfter = Math.ceil((this.props.frameWidth - alignmentOffset) / this.props.slideWidth) - 1;\n        var slidesAfter = slidesInViewAfter + slidesOutOfViewAfter;\n        var distanceFromStart = Math.abs(startSlideIndex - currentSlideIndex);\n\n        if (currentSlideIndex < startSlideIndex) {\n          if (distanceFromStart > slidesBefore) {\n            targetPosition = (this.props.slideWidth + this.props.cellSpacing) * (this.props.slideCount + currentSlideIndex);\n          }\n        } else if (distanceFromStart > slidesAfter) {\n          targetPosition = (this.props.slideWidth + this.props.cellSpacing) * (this.props.slideCount - currentSlideIndex) * -1;\n        }\n      }\n\n      return targetPosition + offset || 0;\n    }\n    /* eslint-enable complexity */\n\n  }, {\n    key: \"formatChildren\",\n    value: function formatChildren(children) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          top = _this$props.top,\n          left = _this$props.left,\n          currentSlide = _this$props.currentSlide,\n          slidesToShow = _this$props.slidesToShow,\n          vertical = _this$props.vertical;\n      var positionValue = vertical ? top : left;\n      return React.Children.map(children, function (child, index) {\n        var visible = index >= currentSlide && index < currentSlide + slidesToShow;\n        var isVisible = isFullyVisible(index, _this2.props);\n        var inert = isVisible ? {} : {\n          inert: 'true'\n        };\n        return React.createElement(\"li\", _extends({\n          className: \"slider-slide\".concat(visible ? ' slide-visible' : ''),\n          style: _this2.getSlideStyles(index, positionValue),\n          key: index,\n          onClick: handleSelfFocus,\n          tabIndex: -1\n        }, inert), child);\n      });\n    }\n  }, {\n    key: \"getSlideStyles\",\n    value: function getSlideStyles(index, positionValue) {\n      var targetPosition = this.getSlideTargetPosition(index, positionValue);\n      var transformScale = this.props.animation === 'zoom' && this.props.currentSlide !== index ? Math.max(Math.min(this.props.zoomScale, MAX_ZOOM_SCALE), MIN_ZOOM_SCALE) : 1.0;\n      return {\n        boxSizing: 'border-box',\n        display: this.props.vertical ? 'block' : 'inline-block',\n        height: getSlideHeight(this.props),\n        left: this.props.vertical ? 0 : targetPosition,\n        listStyleType: 'none',\n        marginBottom: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n        marginLeft: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n        marginRight: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n        marginTop: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n        MozBoxSizing: 'border-box',\n        position: 'absolute',\n        top: this.props.vertical ? targetPosition : 0,\n        transform: \"scale(\".concat(transformScale, \")\"),\n        transition: 'transform .4s linear',\n        verticalAlign: 'top',\n        width: this.props.vertical ? '100%' : this.props.slideWidth\n      };\n    }\n  }, {\n    key: \"getListStyles\",\n    value: function getListStyles(styles) {\n      var deltaX = styles.deltaX,\n          deltaY = styles.deltaY;\n      var listWidth = this.props.slideWidth * React.Children.count(this.props.children);\n      var spacingOffset = this.props.cellSpacing * React.Children.count(this.props.children);\n      var transform = \"translate3d(\".concat(deltaX, \"px, \").concat(deltaY, \"px, 0)\");\n      return {\n        boxSizing: 'border-box',\n        cursor: this.props.dragging === true ? 'pointer' : 'inherit',\n        display: 'block',\n        height: this.props.vertical ? listWidth + spacingOffset : this.props.slideHeight,\n        margin: this.props.vertical ? \"\".concat(this.props.cellSpacing / 2 * -1, \"px 0px\") : \"0px \".concat(this.props.cellSpacing / 2 * -1, \"px\"),\n        padding: 0,\n        position: 'relative',\n        MozBoxSizing: 'border-box',\n        msTransform: \"translate(\".concat(deltaX, \"px, \").concat(deltaY, \"px)\"),\n        touchAction: \"pinch-zoom \".concat(this.props.vertical ? 'pan-x' : 'pan-y'),\n        transform: transform,\n        WebkitTransform: transform,\n        width: 'auto'\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.formatChildren(this.props.children);\n      var deltaX = this.props.deltaX;\n      var deltaY = this.props.deltaY;\n      return React.createElement(\"ul\", {\n        className: \"slider-list\",\n        style: this.getListStyles({\n          deltaX: deltaX,\n          deltaY: deltaY\n        })\n      }, children);\n    }\n  }]);\n\n  return ScrollTransition;\n}(React.Component);\n\nexport { ScrollTransition as default };\nScrollTransition.propTypes = {\n  animation: PropTypes.oneOf(['zoom']),\n  cellAlign: PropTypes.string,\n  cellSpacing: PropTypes.number,\n  currentSlide: PropTypes.number,\n  deltaX: PropTypes.number,\n  deltaY: PropTypes.number,\n  dragging: PropTypes.bool,\n  frameWidth: PropTypes.number,\n  heightMode: PropTypes.oneOf(['first', 'current', 'max']),\n  isWrappingAround: PropTypes.bool,\n  left: PropTypes.number,\n  slideCount: PropTypes.number,\n  slideHeight: PropTypes.number,\n  slideOffset: PropTypes.number,\n  slidesToScroll: PropTypes.number,\n  slideWidth: PropTypes.number,\n  top: PropTypes.number,\n  vertical: PropTypes.bool,\n  wrapAround: PropTypes.bool,\n  zoomScale: PropTypes.number\n};\nScrollTransition.defaultProps = {\n  cellAlign: 'left',\n  cellSpacing: 0,\n  currentSlide: 0,\n  deltaX: 0,\n  deltaY: 0,\n  dragging: false,\n  frameWidth: 0,\n  heightMode: 'max',\n  isWrappingAround: false,\n  left: 0,\n  slideCount: 0,\n  slideHeight: 0,\n  slidesToScroll: 1,\n  slideWidth: 0,\n  top: 0,\n  vertical: false,\n  wrapAround: false,\n  zoomScale: 0.85\n};","map":null,"metadata":{},"sourceType":"module"}