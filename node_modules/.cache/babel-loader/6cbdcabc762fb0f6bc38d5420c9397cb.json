{"ast":null,"code":"var _jsxFileName = \"C:\\\\cs\\\\pulmonic plus\\\\english-news-website\\\\src\\\\components\\\\home\\\\content\\\\weatherModule\\\\pcWeather.js\";\nimport React from 'react';\nimport { Card } from 'antd';\nimport { Tabs } from 'antd';\nimport { Router, Route, Link, browserHistory } from 'react-router';\nimport WeatherTitles from \"./weather_titles\";\nimport WeatherForm from \"./weather_form\";\nimport WeatherResult from \"./weather_result\"; //import WeatherDemo from './weather_demo';\n\nexport default class PCWeather extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      news: '',\n      latitude: '',\n      longitude: '',\n      type: '',\n      adv: 6,\n      city: undefined,\n      temperature: undefined,\n      data: undefined,\n      humidity: undefined,\n      weather: undefined,\n      error: undefined,\n      country: undefined,\n      user_city: '',\n      user_country: 'America',\n      user_address: '',\n      img: ''\n    };\n  }\n\n  getType(key) {\n    console.log(\"eee\");\n    console.log(\"father\" + key);\n    var tmp_img = ''; // 这里已经拿到子组件给的地址参数在key 现在就是把key中的dallas提取出来 然后给api读取气候\n\n    var arr = key.split(\", \");\n    var reg = /[\\u4e00-\\u9fa5]/g;\n    console.log(key.replace(reg, \"\"));\n    key = key.replace(reg, \"\");\n    this.setState({\n      user_city: arr[1],\n      user_address: key\n    } // arr[1]保存了字符串地址解析出来以后剩下的dallas\n    );\n    var myFetchOptions = {\n      method: 'GET'\n    };\n    fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\" + arr[1] + \",\" + this.state.user_country + \"&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json()).then(json => {\n      var tmp_temp = parseInt(json.main.temp * 1.8 + 32);\n      this.setState({\n        news: json.weather[0],\n        temperature: tmp_temp,\n        city: json.name,\n        humidity: json.main.humidity,\n        country: json.sys.country,\n        error: \"\"\n      });\n      tmp_img = json.weather[0].description;\n      console.log(tmp_img.indexOf(\"haze\") != -1);\n\n      if (tmp_img.indexOf(\"cloud\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/cloudy.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"haze\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/haze.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"sunny\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/sunny.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"rain\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/raining.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"snow\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/snowing.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"storm\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/storm.png\"\n        });\n        return true;\n      }\n\n      this.setState({\n        img: \"../../../../assets/images/sky.png\"\n      });\n    });\n  }\n\n  componentWillMount() {\n    var tmp_img = '';\n    var myFetchOptions = {\n      method: 'GET'\n    };\n    fetch(\"http://api.openweathermap.org/data/2.5/weather?q=dallas,america&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json()).then(json => {\n      var tmp_temp = parseInt(json.main.temp * 1.8 + 32);\n      this.setState({\n        news: json.weather[0],\n        temperature: tmp_temp,\n        city: json.name,\n        humidity: json.main.humidity,\n        country: json.sys.country,\n        error: \"\"\n      });\n      console.log(json.weather[0].description);\n      tmp_img = json.weather[0].description;\n      console.log(tmp_img.indexOf(\"haze\") != -1);\n\n      if (tmp_img.indexOf(\"cloud\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/cloudy.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"haze\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/haze.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"sunny\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/sunny.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"rain\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/raining.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"snow\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/snowing.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"storm\") != -1) {\n        this.setState({\n          img: \"../../../../assets/images/storm.png\"\n        });\n        return true;\n      }\n\n      this.setState({\n        img: \"../../../../assets/images/sky.png\"\n      });\n    });\n  }\n\n  render() {\n    var settings2 = {\n      dots: false,\n      infinite: true,\n      autoplayInterval: 6000,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      autoplay: true\n    };\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      class: \"topNewsList\",\n      style: {\n        marginBottom: \"33px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-7 form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"city\",\n      placeholder: \"City...\",\n      value: this.state.user_city,\n      onChange: this.handleInputChange1.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"country\",\n      placeholder: \"Country...\",\n      value: this.state.user_country,\n      onChange: this.handleInputChange2.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(WeatherResult, {\n      temperature: this.state.temperature,\n      humidity: this.state.humidity,\n      city: this.state.city,\n      country: this.state.country,\n      description: this.state.news.description,\n      error: this.state.error,\n      current_location: this.state.user_address,\n      img: this.state.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })));\n  }\n\n  handleInputChange1(e) {\n    var tmp_img = '';\n    console.log(e.target.value); //\t\tconst city = e.target.elements.city.value;\n    //\t \tconst country = e.target.elements.country.value;\n\n    console.log(\"111\");\n    this.setState({\n      user_city: e.target.value\n    });\n    console.log(\"222\");\n    var myFetchOptions = {\n      method: 'GET'\n    };\n    fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\" + e.target.value + \",\" + this.state.user_country + \"&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json()).then(json => {\n      var tmp_temp = parseInt(json.main.temp * 1.8 + 32);\n      console.log(\"this is weather \" + tmp_temp);\n      this.setState({\n        news: json.weather[0],\n        temperature: tmp_temp,\n        city: json.name,\n        humidity: json.main.humidity,\n        country: json.sys.country,\n        error: \"\"\n      });\n      console.log(\"333\");\n      tmp_img = json.weather[0].description;\n      console.log(tmp_img.indexOf(\"haze\") != -1);\n\n      if (tmp_img.indexOf(\"cloud\") != -1) {\n        this.setState({\n          img: \"./src/images/cloudy.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"haze\") != -1) {\n        this.setState({\n          img: \"./src/images/haze.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"sunny\") != -1) {\n        this.setState({\n          img: \"./src/images/sunny.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"rain\") != -1) {\n        this.setState({\n          img: \"./src/images/raining.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"snow\") != -1) {\n        this.setState({\n          img: \"./src/images/snowing.png\"\n        });\n        return true;\n      }\n\n      if (tmp_img.indexOf(\"storm\") != -1) {\n        this.setState({\n          img: \"./src/images/storm.png\"\n        });\n        return true;\n      }\n\n      this.setState({\n        img: \"./src/images/sky.png\"\n      });\n    });\n  }\n\n  handleInputChange2(e) {\n    console.log(e.target.value); //\t\tconst city = e.target.elements.city.value;\n    //\t \tconst country = e.target.elements.country.value;\n\n    console.log(\"111\");\n    this.setState({\n      user_country: e.target.value\n    });\n    console.log(\"222\");\n    var myFetchOptions = {\n      method: 'GET'\n    };\n    fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\" + this.state.user_city + \",\" + e.target.value + \"&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json()).then(json => {\n      var tmp_temp = parseInt(json.main.temp * 1.8 + 32);\n      this.setState({\n        news: json.weather[0],\n        temperature: tmp_temp,\n        city: json.name,\n        humidity: json.main.humidity,\n        country: json.sys.country,\n        error: \"\"\n      });\n    });\n    console.log(\"333\");\n  }\n\n}","map":{"version":3,"sources":["C:/cs/pulmonic plus/english-news-website/src/components/home/content/weatherModule/pcWeather.js"],"names":["React","Card","Tabs","Router","Route","Link","browserHistory","WeatherTitles","WeatherForm","WeatherResult","PCWeather","Component","constructor","state","news","latitude","longitude","type","adv","city","undefined","temperature","data","humidity","weather","error","country","user_city","user_country","user_address","img","getType","key","console","log","tmp_img","arr","split","reg","replace","setState","myFetchOptions","method","fetch","then","response","json","tmp_temp","parseInt","main","temp","name","sys","description","indexOf","componentWillMount","render","settings2","dots","infinite","autoplayInterval","slidesToShow","slidesToScroll","autoplay","marginBottom","handleInputChange1","bind","handleInputChange2","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Card} from 'antd';\r\nimport {Tabs} from 'antd';\r\nimport {Router, Route, Link, browserHistory} from 'react-router'\r\nimport WeatherTitles from \"./weather_titles\";\r\nimport WeatherForm from \"./weather_form\";\r\nimport WeatherResult from \"./weather_result\";\r\n//import WeatherDemo from './weather_demo';\r\n\r\nexport default class PCWeather extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tnews: '',\r\n\t\t\tlatitude: '',\r\n\t\t\tlongitude:'',\r\n\t\t\ttype:'',\r\n\t\t\tadv: 6,\r\n\t\t\tcity:undefined,\r\n\t\t\ttemperature: undefined,\r\n\t\t\tdata: undefined,\r\n\t\t\thumidity: undefined,\r\n\t\t\tweather: undefined,\r\n\t\t\terror: undefined,\r\n\t\t\tcountry:undefined,\r\n\t\t\tuser_city:'',\r\n\t\t\tuser_country:'America',\r\n\t\t\tuser_address:'',\r\n\t\t\timg:''\r\n\t\t};\r\n\t}\r\n\r\n\tgetType(key) {\r\n\tconsole.log(\"eee\")\r\n\tconsole.log( \"father\"+ key);\r\n\tvar tmp_img = '';\r\n\t// 这里已经拿到子组件给的地址参数在key 现在就是把key中的dallas提取出来 然后给api读取气候\r\n\tvar arr=key.split(\", \");\r\n\r\n\tvar reg =/[\\u4e00-\\u9fa5]/g;\r\n\r\n  console.log(key.replace(reg, \"\"));\r\n\tkey=key.replace(reg, \"\");\r\n \tthis.setState(\r\n\t\t{\r\n\t\t\tuser_city: arr[1],\r\n\t  \tuser_address: key\r\n\t\t } // arr[1]保存了字符串地址解析出来以后剩下的dallas\r\n\t\t\t);\r\n\r\n\tvar myFetchOptions = {\r\n\t\tmethod: 'GET'\r\n\t};\r\n\r\n\tfetch(\"http://api.openweathermap.org/data/2.5/weather?q=\"+arr[1]+\",\"+this.state.user_country+\"&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json())\r\n\t.then(json =>\r\n\t\t{\r\n\t\t\tvar tmp_temp = parseInt(json.main.temp*1.8+32);\r\n\t\t\tthis.setState(\r\n\t\t{\r\n\t\t\t news: json.weather[0],\r\n\t\t\t temperature: tmp_temp,\r\n\t\t\t city: json.name,\r\n\t\t\t humidity: json.main.humidity,\r\n\t\t\t country: json.sys.country,\r\n\t\t\t error: \"\"\r\n\t\t});\r\n\r\n\t\ttmp_img=json.weather[0].description;\r\n\t\tconsole.log(tmp_img.indexOf(\"haze\")!= -1 );\r\n\t\tif (tmp_img.indexOf(\"cloud\")!= -1) {\r\n\t\t\tthis.setState({img:\"../../../../assets/images/cloudy.png\"});\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (tmp_img.indexOf(\"haze\")!= -1) {\r\n\t\t\t\tthis.setState({img:\"../../../../assets/images/haze.png\"});\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\tif (tmp_img.indexOf(\"sunny\")!= -1) {\r\n\t\t\t\t\tthis.setState({img:\"../../../../assets/images/sunny.png\"});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\tif (tmp_img.indexOf(\"rain\")!= -1) {\r\n\t\t\t\t\t\tthis.setState({img:\"../../../../assets/images/raining.png\"});\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\tif (tmp_img.indexOf(\"snow\")!= -1) {\r\n\t\t\t\t\t\t\tthis.setState({img:\"../../../../assets/images/snowing.png\"});\r\n\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\tif (tmp_img.indexOf(\"storm\")!= -1) {\r\n\t\t\t\t\t\t\t\tthis.setState({img:\"../../../../assets/images/storm.png\"});\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\tthis.setState({img:\"../../../../assets/images/sky.png\"});\r\n\r\n\r\n\t\t\t\t\t})  }\r\n\r\n\r\n\tcomponentWillMount() {\r\n\t\tvar tmp_img = '';\r\n\t\tvar myFetchOptions = {\r\n\t\t\tmethod: 'GET'\r\n\t\t};\r\n\r\n\t\tfetch(\"http://api.openweathermap.org/data/2.5/weather?q=dallas,america&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json())\r\n\t\t.then(json =>{\r\n\t\t\tvar tmp_temp = parseInt(json.main.temp*1.8+32);\r\n\t\t\t this.setState(\r\n\t\t\t{\r\n\t\t\t\t news: json.weather[0],\r\n\t\t\t\t temperature: tmp_temp,\r\n\t\t\t\t city: json.name,\r\n\t\t\t\t humidity: json.main.humidity,\r\n\t\t\t\t country: json.sys.country,\r\n\t\t\t\t error: \"\"\r\n\t\t\t})\r\n\t\t\tconsole.log(json.weather[0].description);\r\n\t\t\ttmp_img=json.weather[0].description;\r\n\t\t\tconsole.log(tmp_img.indexOf(\"haze\")!= -1 );\r\n\t\t\tif (tmp_img.indexOf(\"cloud\")!= -1) {\r\n\t\t\t\tthis.setState({img:\"../../../../assets/images/cloudy.png\"});\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"haze\")!= -1) {\r\n\t\t\t\t\tthis.setState({img:\"../../../../assets/images/haze.png\"});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"sunny\")!= -1) {\r\n\t\t\t\t\t\tthis.setState({img:\"../../../../assets/images/sunny.png\"});\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"rain\")!= -1) {\r\n\t\t\t\t\t\t\tthis.setState({img:\"../../../../assets/images/raining.png\"});\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"snow\")!= -1) {\r\n\t\t\t\t\t\t\t\tthis.setState({img:\"../../../../assets/images/snowing.png\"});\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"storm\")!= -1) {\r\n\t\t\t\t\t\t\t\t\tthis.setState({img:\"../../../../assets/images/storm.png\"});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\tthis.setState({img:\"../../../../assets/images/sky.png\"});\r\n\r\n\r\n\t\t\t\t\t\t})  }\r\n\trender() {\r\n\t\tvar settings2 = {\r\n\t\tdots: false,\r\n\t\tinfinite: true,\r\n\t\tautoplayInterval: 6000,\r\n\t\tslidesToShow: 1,\r\n\t\tslidesToScroll: 1,\r\n\t\tautoplay:true\r\n\t};\r\n\tconsole.log(this.state);\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div class=\"topNewsList\" style={{marginBottom: \"33px\"}}>\r\n\t\t{/*\t<WeatherDemo getType={this.getType.bind(this)}/> */}\r\n{/* \t\t<div className=\"col-xs-5 title-container\">\r\n\t\t\t\t<WeatherTitles />\r\n\t\t\t</div>  */}\r\n\r\n\t\t\t<div className=\"col-xs-7 form-container\">\r\n\r\n\t\t\t<form>\r\n\t\t\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"\r\n\t\t\t\t\t\t\tvalue={this.state.user_city}\r\n\t\t\t\t\t\t\tonChange={this.handleInputChange1.bind(this)}\r\n\r\n\t\t\t\t/ >\r\n\t\t\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"\r\n\t\t\t\tvalue={this.state.user_country}\r\n\t\t\t\tonChange={this.handleInputChange2.bind(this)}\r\n\t\t\t\t/>\r\n\r\n\t\t\t</form>\r\n\r\n\r\n\t\t\t<WeatherResult\r\n\t\t\ttemperature={this.state.temperature}\r\n\t\t\thumidity={this.state.humidity}\r\n\t\t\tcity={this.state.city}\r\n\t\t\tcountry={this.state.country}\r\n\t\t\tdescription={this.state.news.description}\r\n\t\t\terror={this.state.error}\r\n\t\t\tcurrent_location={this.state.user_address}\r\n\t\t\timg={this.state.img}\r\n\r\n\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\r\n\r\n\r\n\r\n\t\t</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t);\r\n\t};\r\n\r\n\thandleInputChange1(e){\r\n\t\t\t\tvar tmp_img = '';\r\n\t\tconsole.log(e.target.value);\r\n//\t\tconst city = e.target.elements.city.value;\r\n//\t \tconst country = e.target.elements.country.value;\r\n\t\tconsole.log(\"111\");\r\n\t\t this.setState({\r\n\t\t \tuser_city: e.target.value\r\n\r\n\t\t })\r\n\t\tconsole.log(\"222\");\r\n\t\tvar myFetchOptions = {\r\n\t\t\tmethod: 'GET'\r\n\t\t};\r\n\r\n\t\tfetch(\"http://api.openweathermap.org/data/2.5/weather?q=\"+e.target.value+\",\"+this.state.user_country+\"&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json())\r\n\t\t.then(json => {\r\n\t\t\tvar tmp_temp = parseInt(json.main.temp*1.8+32);\r\n\t\t\tconsole.log(\"this is weather \" + tmp_temp);\r\n\t\t\t this.setState(\r\n\t\t\t{\r\n\t\t\t\t news: json.weather[0],\r\n\t\t\t\t temperature: tmp_temp,\r\n\t\t\t\t city: json.name,\r\n\t\t\t\t humidity: json.main.humidity,\r\n\t\t\t\t country: json.sys.country,\r\n\t\t\t\t error: \"\"\r\n\t\t\t});\r\n\t\t\tconsole.log(\"333\");\r\n\t\t\ttmp_img=json.weather[0].description;\r\n\t\t\tconsole.log(tmp_img.indexOf(\"haze\")!= -1 );\r\n\t\t\tif (tmp_img.indexOf(\"cloud\")!= -1) {\r\n\t\t\t\tthis.setState({img:\"./src/images/cloudy.png\"});\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"haze\")!= -1) {\r\n\t\t\t\t\tthis.setState({img:\"./src/images/haze.png\"});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"sunny\")!= -1) {\r\n\t\t\t\t\t\tthis.setState({img:\"./src/images/sunny.png\"});\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"rain\")!= -1) {\r\n\t\t\t\t\t\t\tthis.setState({img:\"./src/images/raining.png\"});\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"snow\")!= -1) {\r\n\t\t\t\t\t\t\t\tthis.setState({img:\"./src/images/snowing.png\"});\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\tif (tmp_img.indexOf(\"storm\")!= -1) {\r\n\t\t\t\t\t\t\t\t\tthis.setState({img:\"./src/images/storm.png\"});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\tthis.setState({img:\"./src/images/sky.png\"});\r\n\r\n\r\n\t\t\t})  }\r\n\r\n\thandleInputChange2(e){\r\n\t\tconsole.log(e.target.value);\r\n//\t\tconst city = e.target.elements.city.value;\r\n//\t \tconst country = e.target.elements.country.value;\r\n\t\tconsole.log(\"111\");\r\n\t\t this.setState({\r\n\t\t\tuser_country: e.target.value\r\n\r\n\t\t })\r\n\t\tconsole.log(\"222\");\r\n\t\tvar myFetchOptions = {\r\n\t\t\tmethod: 'GET'\r\n\t\t};\r\n\r\n\t\tfetch(\"http://api.openweathermap.org/data/2.5/weather?q=\"+this.state.user_city+\",\"+e.target.value+\"&appid=afa570de413ba776fbc8c1107a059088&units=metric\", myFetchOptions).then(response => response.json())\r\n\t\t.then(json =>{\r\n\t\t\tvar tmp_temp = parseInt(json.main.temp*1.8+32);\r\n\t\t\t this.setState(\r\n\t\t\t{\r\n\t\t\t\t news: json.weather[0],\r\n\t\t\t\t temperature: tmp_temp,\r\n\t\t\t\t city: json.name,\r\n\t\t\t\t humidity: json.main.humidity,\r\n\t\t\t\t country: json.sys.country,\r\n\t\t\t\t error: \"\"\r\n\t\t\t})});\r\n\t\t\tconsole.log(\"333\");\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}